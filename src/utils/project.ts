import fs from 'fs-extra';
import path from 'path';
import chalk from 'chalk';
import ora from 'ora';
import { execSync } from 'child_process';

type ProjectConfig = {
  typescript: boolean;
  esbuild: boolean;
  npmInstall: boolean;
};

/**
 * Generate template directory name based on options
 */
export function getTemplateName(
  baseTemplate: string,
  config: ProjectConfig
): string {
  const langPrefix = config.typescript ? 'ts' : 'js';
  const buildPrefix = config.esbuild ? 'esbuild' : 'default';

  return `${langPrefix}-${buildPrefix}-${baseTemplate}`;
}

/**
 * Update package.json with project name and basic info
 */
export async function updatePackageJson(
  targetDir: string,
  projectName: string,
  config: ProjectConfig
) {
  const packageJsonPath = path.join(targetDir, 'package.json');
  const packageJson = await fs.readJson(packageJsonPath);

  // Update project name and basic info
  packageJson.name = projectName;
  packageJson.description =
    packageJson.description ||
    `${projectName} - Generated by MVP Template Generator`;

  // Ensure engines are set
  if (!packageJson.engines) {
    packageJson.engines = {
      node: '>=16.0.0',
      npm: '>=7.0.0',
    };
  }

  await fs.writeJson(packageJsonPath, packageJson, { spaces: 2 });
}

/**
 * Install npm dependencies if requested
 */
export async function installDependencies(
  targetDir: string,
  config: ProjectConfig
) {
  if (!config.npmInstall) {
    return;
  }

  const spinner = ora('Installing dependencies...').start();

  try {
    execSync('npm install', {
      cwd: targetDir,
      stdio: 'inherit',
      env: { ...process.env, npm_config_yes: 'true' },
    });

    spinner.succeed(chalk.green('Dependencies installed successfully!'));
  } catch (error) {
    spinner.fail(chalk.red('Failed to install dependencies'));
    console.log(chalk.yellow('\nðŸ’¡ You can install them manually by running:'));
    console.log(chalk.white('  npm install\n'));
  }
}

/**
 * Print next steps for regular directory creation
 */
export function printNextSteps(projectName: string, config: ProjectConfig) {
  console.log('\n' + chalk.cyan('ðŸŽ‰ Next steps:'));

  if (!config.npmInstall) {
    console.log(chalk.gray('  # Navigate to your project'));
    console.log(chalk.white(`  cd ${projectName}`));
    console.log('');
    console.log(chalk.gray('  # Install dependencies'));
    console.log(chalk.white('  npm install'));
    console.log('');
  }

  console.log(chalk.gray('  # Start development server'));
  if (config.esbuild) {
    console.log(chalk.white('  npm run dev'));
  } else {
    console.log(chalk.white('  npm start'));
  }
  console.log('');

  if (config.esbuild) {
    console.log(chalk.gray('  # Build for production'));
    console.log(chalk.white('  npm run build'));
    console.log('');
  }

  if (config.typescript) {
    console.log(chalk.gray('  # Type check'));
    console.log(chalk.white('  npm run typecheck'));
    console.log('');
  }

  console.log(chalk.green('Happy coding! ðŸš€'));
}

/**
 * Print next steps for current directory initialization
 */
export function printCurrentDirectoryNextSteps(
  projectName: string,
  config: ProjectConfig
) {
  console.log('\n' + chalk.cyan('ðŸŽ‰ Next steps:'));

  if (!config.npmInstall) {
    console.log(chalk.gray('  # Install dependencies'));
    console.log(chalk.white('  npm install'));
    console.log('');
  }

  console.log(chalk.gray('  # Start development server'));
  if (config.esbuild) {
    console.log(chalk.white('  npm run dev'));
  } else {
    console.log(chalk.white('  npm start'));
  }
  console.log('');

  if (config.esbuild) {
    console.log(chalk.gray('  # Build for production'));
    console.log(chalk.white('  npm run build'));
    console.log('');
  }

  if (config.typescript) {
    console.log(chalk.gray('  # Type check'));
    console.log(chalk.white('  npm run typecheck'));
    console.log('');
  }

  console.log(chalk.green('Happy coding! ðŸš€'));
}

// Legacy functions for backward compatibility (now unused)
export async function setupTypeScript(targetDir: string) {
  // This function is no longer needed as templates already have tsconfig.json when needed
  console.log(
    chalk.yellow('TypeScript setup is now handled by template structure')
  );
}

export async function setupESBuild(targetDir: string) {
  // This function is no longer needed as templates already have esbuild config when needed
  console.log(
    chalk.yellow('ESBuild setup is now handled by template structure')
  );
}
